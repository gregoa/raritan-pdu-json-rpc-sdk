// SPDX-License-Identifier: BSD-3-Clause
//
// Copyright 2020 Raritan Inc. All rights reserved.
//
// This file was generated by IdlC from RadiusManager.idl.

using System;
using System.Linq;
using LightJson;
using Com.Raritan.Idl;
using Com.Raritan.JsonRpc;
using Com.Raritan.Util;

#pragma warning disable 0108, 0219, 0414, 1591

namespace Com.Raritan.Idl.auth {
  public class RadiusManager : ObjectProxy {

    static public readonly new TypeInfo typeInfo = new TypeInfo("auth.RadiusManager:1.0.0", null);

    public RadiusManager(Agent agent, string rid, TypeInfo ti) : base(agent, rid, ti) {}
    public RadiusManager(Agent agent, string rid) : this(agent, rid, typeInfo) {}

    public static new RadiusManager StaticCast(ObjectProxy proxy) {
      return proxy == null ? null : new RadiusManager(proxy.Agent, proxy.Rid, proxy.StaticTypeInfo);
    }

    public const int ERR_INVALID_CFG = 1;

    public const int ERR_SERVER_UNSPECIFIED = 2;

    public const int ERR_INVALID_SHARED_SECRET = 3;

    public const int ERR_SERVER_UNREACHABLE = 4;

    public const int ERR_AUTHENTICATION_FAILED = 5;

    public const int ERR_NO_ROLES = 6;

    public const int ERR_NO_KNOWN_ROLES = 7;

    public class GetRadiusServersResult {
      public System.Collections.Generic.IEnumerable<Com.Raritan.Idl.radius.ServerSettings> _ret_;
    }

    public GetRadiusServersResult getRadiusServers() {
      JsonObject _parameters = null;
      var _result = RpcCall("getRadiusServers", _parameters);
      var _ret = new GetRadiusServersResult();
      _ret._ret_ = new System.Collections.Generic.List<Com.Raritan.Idl.radius.ServerSettings>(_result["_ret_"].AsJsonArray.Select(
        _value => Com.Raritan.Idl.radius.ServerSettings.Decode(_value, agent)));
      return _ret;
    }

    public AsyncRequest getRadiusServers(AsyncRpcResponse<GetRadiusServersResult>.SuccessHandler rsp, AsyncRpcResponse.FailureHandler fail) {
      return getRadiusServers(rsp, fail, RpcCtrl.Default);
    }

    public AsyncRequest getRadiusServers(AsyncRpcResponse<GetRadiusServersResult>.SuccessHandler rsp, AsyncRpcResponse.FailureHandler fail, RpcCtrl rpcCtrl) {
      JsonObject _parameters = null;
      return RpcCall("getRadiusServers", _parameters,
        _result => {
          try {
            var _ret = new GetRadiusServersResult();
            _ret._ret_ = new System.Collections.Generic.List<Com.Raritan.Idl.radius.ServerSettings>(_result["_ret_"].AsJsonArray.Select(
              _value => Com.Raritan.Idl.radius.ServerSettings.Decode(_value, agent)));
            rsp(_ret);
          } catch (Exception e) {
            if (fail != null) fail(e);
          }
        }, fail, rpcCtrl);
    }

    public class SetRadiusServersResult {
      public int _ret_;
    }

    public SetRadiusServersResult setRadiusServers(System.Collections.Generic.IEnumerable<Com.Raritan.Idl.radius.ServerSettings> serverList) {
      var _parameters = new LightJson.JsonObject();
      _parameters["serverList"] = new JsonArray(serverList.Select(
        _value => (JsonValue)(_value.Encode())));

      var _result = RpcCall("setRadiusServers", _parameters);
      var _ret = new SetRadiusServersResult();
      _ret._ret_ = (int)_result["_ret_"];
      return _ret;
    }

    public AsyncRequest setRadiusServers(System.Collections.Generic.IEnumerable<Com.Raritan.Idl.radius.ServerSettings> serverList, AsyncRpcResponse<SetRadiusServersResult>.SuccessHandler rsp, AsyncRpcResponse.FailureHandler fail) {
      return setRadiusServers(serverList, rsp, fail, RpcCtrl.Default);
    }

    public AsyncRequest setRadiusServers(System.Collections.Generic.IEnumerable<Com.Raritan.Idl.radius.ServerSettings> serverList, AsyncRpcResponse<SetRadiusServersResult>.SuccessHandler rsp, AsyncRpcResponse.FailureHandler fail, RpcCtrl rpcCtrl) {
      var _parameters = new LightJson.JsonObject();
      try {
        _parameters["serverList"] = new JsonArray(serverList.Select(
          _value => (JsonValue)(_value.Encode())));
      } catch (Exception e) {
        if (fail != null) fail(e);
      }

      return RpcCall("setRadiusServers", _parameters,
        _result => {
          try {
            var _ret = new SetRadiusServersResult();
            _ret._ret_ = (int)_result["_ret_"];
            rsp(_ret);
          } catch (Exception e) {
            if (fail != null) fail(e);
          }
        }, fail, rpcCtrl);
    }

    public class TestRadiusServerResult {
      public int _ret_;
    }

    public TestRadiusServerResult testRadiusServer(string username, string password, Com.Raritan.Idl.radius.ServerSettings settings) {
      var _parameters = new LightJson.JsonObject();
      _parameters["username"] = username;
      _parameters["password"] = password;
      _parameters["settings"] = settings.Encode();

      var _result = RpcCall("testRadiusServer", _parameters);
      var _ret = new TestRadiusServerResult();
      _ret._ret_ = (int)_result["_ret_"];
      return _ret;
    }

    public AsyncRequest testRadiusServer(string username, string password, Com.Raritan.Idl.radius.ServerSettings settings, AsyncRpcResponse<TestRadiusServerResult>.SuccessHandler rsp, AsyncRpcResponse.FailureHandler fail) {
      return testRadiusServer(username, password, settings, rsp, fail, RpcCtrl.Default);
    }

    public AsyncRequest testRadiusServer(string username, string password, Com.Raritan.Idl.radius.ServerSettings settings, AsyncRpcResponse<TestRadiusServerResult>.SuccessHandler rsp, AsyncRpcResponse.FailureHandler fail, RpcCtrl rpcCtrl) {
      var _parameters = new LightJson.JsonObject();
      try {
        _parameters["username"] = username;
        _parameters["password"] = password;
        _parameters["settings"] = settings.Encode();
      } catch (Exception e) {
        if (fail != null) fail(e);
      }

      return RpcCall("testRadiusServer", _parameters,
        _result => {
          try {
            var _ret = new TestRadiusServerResult();
            _ret._ret_ = (int)_result["_ret_"];
            rsp(_ret);
          } catch (Exception e) {
            if (fail != null) fail(e);
          }
        }, fail, rpcCtrl);
    }

  }
}
