# SPDX-License-Identifier: BSD-3-Clause
#
# Copyright 2020 Raritan Inc. All rights reserved.
#
# This file was generated by IdlC from AlertedSensorManager.idl.

use strict;

package Raritan::RPC::sensors::AlertedSensorManager::AlertedSensorsChangedEvent;

use constant typeId => "sensors.AlertedSensorManager.AlertedSensorsChangedEvent:1.0.0";
use Raritan::RPC::sensors::AlertedSensorManager::SensorCounts;
use Raritan::RPC::idl::Event;
use Raritan::RPC::sensors::AlertedSensorManager::SensorData;

sub encode {
    my ($in) = @_;
    my $encoded = Raritan::RPC::idl::Event::encode($in);
    $encoded->{'counts'} = Raritan::RPC::sensors::AlertedSensorManager::SensorCounts::encode($in->{'counts'});
    $encoded->{'changedSensors'} = [];
    for (my $i0 = 0; $i0 <= $#{$in->{'changedSensors'}}; $i0++) {
        $encoded->{'changedSensors'}->[$i0] = Raritan::RPC::sensors::AlertedSensorManager::SensorData::encode($in->{'changedSensors'}->[$i0]);
    }
    $encoded->{'removedSensors'} = [];
    for (my $i0 = 0; $i0 <= $#{$in->{'removedSensors'}}; $i0++) {
        $encoded->{'removedSensors'}->[$i0] = Raritan::RPC::ObjectCodec::encode($in->{'removedSensors'}->[$i0]);
    }
    return $encoded;
}

sub decode {
    my ($agent, $in) = @_;
    my $decoded = Raritan::RPC::idl::Event::decode($agent, $in);
    $decoded->{'counts'} = Raritan::RPC::sensors::AlertedSensorManager::SensorCounts::decode($agent, $in->{'counts'});
    $decoded->{'changedSensors'} = [];
    for (my $i0 = 0; $i0 <= $#{$in->{'changedSensors'}}; $i0++) {
        $decoded->{'changedSensors'}->[$i0] = Raritan::RPC::sensors::AlertedSensorManager::SensorData::decode($agent, $in->{'changedSensors'}->[$i0]);
    }
    $decoded->{'removedSensors'} = [];
    for (my $i0 = 0; $i0 <= $#{$in->{'removedSensors'}}; $i0++) {
        $decoded->{'removedSensors'}->[$i0] = Raritan::RPC::ObjectCodec::decode($agent, $in->{'removedSensors'}->[$i0], 'sensors.Sensor');
    }
    return $decoded;
}

Raritan::RPC::Registry::registerCodecClass('sensors.AlertedSensorManager.AlertedSensorsChangedEvent', 1, 0, 0, 'Raritan::RPC::sensors::AlertedSensorManager::AlertedSensorsChangedEvent');
1;
