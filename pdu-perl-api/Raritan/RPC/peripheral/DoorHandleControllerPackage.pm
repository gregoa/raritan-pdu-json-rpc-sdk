# SPDX-License-Identifier: BSD-3-Clause
#
# Copyright 2020 Raritan Inc. All rights reserved.
#
# This file was generated by IdlC from PeripheralDevicePackage.idl.

use strict;

package Raritan::RPC::peripheral::DoorHandleControllerPackage;

use parent qw(Raritan::RPC::peripheral::Package);

use constant typeId => "peripheral.DoorHandleControllerPackage:1.0.0";

sub new {
    my ($class, $agent, $rid, $typeId) = @_;
    $typeId = $typeId || Raritan::RPC::peripheral::DoorHandleControllerPackage::typeId;
    return $class->SUPER::new($agent, $rid, $typeId);
}

use constant SUCCESS => 0;

use constant ERR_NOT_SUPPORTED => 1;

use constant ERR_OPERATION_FAILED => 2;

sub getSupportedHandleTypes($) {
    my ($self) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    my $rsp = $agent->json_rpc($self->{'rid'}, 'getSupportedHandleTypes', $args);
    my $_ret_;
    $_ret_ = [];
    for (my $i0 = 0; $i0 <= $#{$rsp->{'_ret_'}}; $i0++) {
        $_ret_->[$i0] = $rsp->{'_ret_'}->[$i0];
    }
    return $_ret_;
}

sub getHandleType($$) {
    my ($self, $channel) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    $args->{'channel'} = 1 * $channel;
    my $rsp = $agent->json_rpc($self->{'rid'}, 'getHandleType', $args);
    my $_ret_;
    $_ret_ = $rsp->{'_ret_'};
    return $_ret_;
}

sub setHandleType($$$) {
    my ($self, $channel, $handleType) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    $args->{'channel'} = 1 * $channel;
    $args->{'handleType'} = "$handleType";
    my $rsp = $agent->json_rpc($self->{'rid'}, 'setHandleType', $args);
    my $_ret_;
    $_ret_ = $rsp->{'_ret_'};
    return $_ret_;
}

Raritan::RPC::Registry::registerProxyClass('peripheral.DoorHandleControllerPackage', 1, 0, 0, 'Raritan::RPC::peripheral::DoorHandleControllerPackage');
1;
