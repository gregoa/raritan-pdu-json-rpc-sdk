# SPDX-License-Identifier: BSD-3-Clause
#
# Copyright 2020 Raritan Inc. All rights reserved.
#
# This file was generated by IdlC from Usb.idl.

use strict;

package Raritan::RPC::usb::Usb_1_0_1;

use parent qw(Raritan::RPC::RemoteObject);

use constant typeId => "usb.Usb:1.0.1";

sub new {
    my ($class, $agent, $rid, $typeId) = @_;
    $typeId = $typeId || Raritan::RPC::usb::Usb_1_0_1::typeId;
    return $class->SUPER::new($agent, $rid, $typeId);
}

use Raritan::RPC::usb::Usb_1_0_1::Settings;

sub getSettings($) {
    my ($self) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    my $rsp = $agent->json_rpc($self->{'rid'}, 'getSettings', $args);
    my $_ret_;
    $_ret_ = Raritan::RPC::usb::Usb_1_0_1::Settings::decode($agent, $rsp->{'_ret_'});
    return $_ret_;
}

use Raritan::RPC::usb::Usb_1_0_1::Settings;

sub setSettings($$) {
    my ($self, $settings) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    $args->{'settings'} = Raritan::RPC::usb::Usb_1_0_1::Settings::encode($settings);
    my $rsp = $agent->json_rpc($self->{'rid'}, 'setSettings', $args);
    my $_ret_;
    $_ret_ = $rsp->{'_ret_'};
    return $_ret_;
}

use Raritan::RPC::usb::UsbDevice;

sub getDevices($$) {
    my ($self, $usbDevices) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    my $rsp = $agent->json_rpc($self->{'rid'}, 'getDevices', $args);
    $$usbDevices = [];
    for (my $i0 = 0; $i0 <= $#{$rsp->{'usbDevices'}}; $i0++) {
        $$usbDevices->[$i0] = Raritan::RPC::usb::UsbDevice::decode($agent, $rsp->{'usbDevices'}->[$i0]);
    }
}

Raritan::RPC::Registry::registerProxyClass('usb.Usb', 1, 0, 1, 'Raritan::RPC::usb::Usb_1_0_1');
1;
